# version: 0.2
# env:
#   shell: bash
#   parameter-store:
#     SSM_ENV_VALUE: "/ecs/${PROJECT_NAME}/${ENVIRONMENT}/${APP_NAME}/.env"

# phases:
#   build:
#     commands:
#       - echo "copy env..."
#       - echo "${SSM_ENV_VALUE}" > apps/${APP_NAME}/.env
#       - echo apps/${APP_NAME}/.env

#       - echo "Building the Docker image..."
#       - DOCKER_BUILDKIT=1 docker build -f apps/${APP_NAME}/docker/aws/migration/Dockerfile . -t ${APP_NAME}

#       - echo "Running migrations..."
#       - docker run ${APP_NAME}

# artifacts:
#   files:
#     - "**/*"


# # ecrにビルド済みのものをecsで起動してマイグレーションを実行用にした方がいいかもしれない
# # 下記のようなコマンドを実行することで、ECSタスクを実行することができます。
# - name: Run ECS Task with Command Override
#   id: run-migration-task
#   run: |
#     MIGRATION_TASK_ID=$(aws ecs run-task \
#       --cluster ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-cluster \
#       --launch-type FARGATE \
#       --task-definition ${{ steps.get-taskdef-migration1.outputs.taskdef-migration1 }} \
#       --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_ID1 }},${{ secrets.AWS_SUBNET_ID2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP_ADMIN_API }}],assignPublicIp=DISABLED}" \
#       --overrides '{"containerOverrides":[{"name":"${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-admin-api-app","command":["pipenv", "run", "alembic", "upgrade", "head"]}]}' \
#       --query 'tasks[0].taskArn' --output text)
#     echo "MIGRATION_TASK_ID=$MIGRATION_TASK_ID" >> $GITHUB_ENV
#     echo "::set-output name=migration-task-id::$MIGRATION_TASK_ID"

#     # マイグレーションタスクが完了するまで待機
#     aws ecs wait tasks-stopped \
#       --cluster ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecs-cluster \
#       --tasks $MIGRATION_TASK_ID


version: 0.2
env:
  shell: bash
  parameter-store:
    SSM_ENV_VALUE: "/ecs/${PROJECT_NAME}/${ENVIRONMENT}/${APP_NAME}/.env"

phases:
  pre_build:
    commands:
      - echo ${AWS_ACCOUNT_ID}
      - echo ${AWS_REGION}
      - echo ${PROJECT_NAME}
      - echo ${ENVIRONMENT}

      - echo Logging in to Amazon ECR...
      - aws --version
      - export AWS_LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
      - echo $AWS_LOGIN_PASSWORD | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  build:
    commands:
      - echo Pulling Docker image from ECR...
      - docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-${ENVIRONMENT}-admin-api-app:latest
      - echo Running migration script...
      - echo "${SSM_ENV_VALUE}" > .env
      - cat .env
      - docker run --env-file .env ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-${ENVIRONMENT}-admin-api-app:latest pipenv run alembic upgrade head
  post_build:
    commands:
      - echo Migration completed.

artifacts:
  files:
    - '**/*'
  # discard-paths: yes
